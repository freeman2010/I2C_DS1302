;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 4/9/2024 4:42:11 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0x296B      	GOTO       363
_interrupt:
0x0004	0x00FF      	MOVWF      R15
0x0005	0x0E03      	SWAPF      STATUS, 0
0x0006	0x0183      	CLRF       STATUS
0x0007	0x00B7      	MOVWF      ___saveSTATUS
0x0008	0x080A      	MOVF       PCLATH, 0
0x0009	0x00B8      	MOVWF      ___savePCLATH
0x000A	0x018A      	CLRF       PCLATH
0x000B	0x0870      	MOVF       R0, 0
0x000C	0x00A0      	MOVWF      32
0x000D	0x0804      	MOVF       FSR, 0
0x000E	0x00A1      	MOVWF      33
;slave.c,16 :: 		void interrupt()
;slave.c,18 :: 		if(PIR1.SSPIF) // Check for SSPIF
0x000F	0x1D8C      	BTFSS      PIR1, 3
0x0010	0x2840      	GOTO       L_interrupt0
;slave.c,20 :: 		if(SSPSTAT.R_W == 1) // Master read (slave transmit)
0x0011	0x1683      	BSF        STATUS, 5
0x0012	0x1D14      	BTFSS      SSPSTAT, 2
0x0013	0x281B      	GOTO       L_interrupt1
;slave.c,22 :: 		SSPBUF = get_date_array[array_index]; // Load array value
0x0014	0x1283      	BCF        STATUS, 5
0x0015	0x082B      	MOVF       _array_index, 0
0x0016	0x3E2D      	ADDLW      _get_date_array
0x0017	0x0084      	MOVWF      FSR
0x0018	0x0800      	MOVF       INDF, 0
0x0019	0x0093      	MOVWF      SSPBUF
;slave.c,23 :: 		SSPCON.CKP = 1; // Release clock stretch
0x001A	0x1614      	BSF        SSPCON, 4
;slave.c,24 :: 		}
L_interrupt1:
;slave.c,26 :: 		if(SSPSTAT.R_W == 0) // Master write (slave receive)
0x001B	0x1683      	BSF        STATUS, 5
0x001C	0x1914      	BTFSC      SSPSTAT, 2
0x001D	0x283E      	GOTO       L_interrupt2
;slave.c,28 :: 		if(SSPSTAT.D_A == 0) // Last byte was an address
0x001E	0x1A94      	BTFSC      SSPSTAT, 5
0x001F	0x2826      	GOTO       L_interrupt3
;slave.c,30 :: 		reg_adr_flag = 1; // Next byte register address
0x0020	0x3001      	MOVLW      1
0x0021	0x1283      	BCF        STATUS, 5
0x0022	0x00AA      	MOVWF      _reg_adr_flag
;slave.c,31 :: 		temp = SSPBUF; // Clear BF
0x0023	0x0813      	MOVF       SSPBUF, 0
0x0024	0x00B6      	MOVWF      _temp
;slave.c,32 :: 		SSPCON.CKP = 1; // Release clock stretch
0x0025	0x1614      	BSF        SSPCON, 4
;slave.c,33 :: 		}
L_interrupt3:
;slave.c,34 :: 		if(SSPSTAT.D_A == 1) // Last byte was data
0x0026	0x1683      	BSF        STATUS, 5
0x0027	0x1E94      	BTFSS      SSPSTAT, 5
0x0028	0x283E      	GOTO       L_interrupt4
;slave.c,36 :: 		if(reg_adr_flag == 1) // Last byte was register add
0x0029	0x1283      	BCF        STATUS, 5
0x002A	0x082A      	MOVF       _reg_adr_flag, 0
0x002B	0x3A01      	XORLW      1
0x002C	0x1D03      	BTFSS      STATUS, 2
0x002D	0x2832      	GOTO       L_interrupt5
;slave.c,38 :: 		array_index = SSPBUF; // Load register address
0x002E	0x0813      	MOVF       SSPBUF, 0
0x002F	0x00AB      	MOVWF      _array_index
;slave.c,39 :: 		reg_adr_flag = 0; // Next byte will be true data
0x0030	0x01AA      	CLRF       _reg_adr_flag
;slave.c,40 :: 		}
0x0031	0x283E      	GOTO       L_interrupt6
L_interrupt5:
;slave.c,43 :: 		set_date_array[array_index] = SSPBUF; // Yes, read SSP1BUF
0x0032	0x082B      	MOVF       _array_index, 0
0x0033	0x3E23      	ADDLW      _set_date_array
0x0034	0x0084      	MOVWF      FSR
0x0035	0x0813      	MOVF       SSPBUF, 0
0x0036	0x0080      	MOVWF      INDF
;slave.c,44 :: 		if(array_index == (array_length - 1)) {
0x0037	0x082B      	MOVF       _array_index, 0
0x0038	0x3A06      	XORLW      6
0x0039	0x1D03      	BTFSS      STATUS, 2
0x003A	0x283D      	GOTO       L_interrupt7
;slave.c,45 :: 		set_date_time_flag = 1;
0x003B	0x3001      	MOVLW      1
0x003C	0x00AC      	MOVWF      _set_date_time_flag
;slave.c,46 :: 		}
L_interrupt7:
;slave.c,47 :: 		SSPCON.CKP = 1; // Release clock stretch
0x003D	0x1614      	BSF        SSPCON, 4
;slave.c,48 :: 		}
L_interrupt6:
;slave.c,49 :: 		}
L_interrupt4:
;slave.c,50 :: 		}
L_interrupt2:
0x003E	0x1283      	BCF        STATUS, 5
;slave.c,51 :: 		PIR1.SSPIF = 0; // Clear SSP1IF
0x003F	0x118C      	BCF        PIR1, 3
;slave.c,52 :: 		}
L_interrupt0:
;slave.c,54 :: 		if(PIR2.BCLIF == 1)
0x0040	0x1D8D      	BTFSS      PIR2, 3
0x0041	0x2846      	GOTO       L_interrupt8
;slave.c,56 :: 		temp = SSPBUF; // Clear BF
0x0042	0x0813      	MOVF       SSPBUF, 0
0x0043	0x00B6      	MOVWF      _temp
;slave.c,57 :: 		PIR2.BCLIF = 0; // Clear BCLIF
0x0044	0x118D      	BCF        PIR2, 3
;slave.c,58 :: 		SSPCON.CKP = 1; // Release clock stretching
0x0045	0x1614      	BSF        SSPCON, 4
;slave.c,59 :: 		}
L_interrupt8:
;slave.c,60 :: 		}
L_end_interrupt:
L__interrupt13:
0x0046	0x0820      	MOVF       32, 0
0x0047	0x00F0      	MOVWF      R0
0x0048	0x0821      	MOVF       33, 0
0x0049	0x0084      	MOVWF      FSR
0x004A	0x0838      	MOVF       ___savePCLATH, 0
0x004B	0x008A      	MOVWF      PCLATH
0x004C	0x0E37      	SWAPF      ___saveSTATUS, 0
0x004D	0x0083      	MOVWF      STATUS
0x004E	0x0EFF      	SWAPF      R15, 1
0x004F	0x0E7F      	SWAPF      R15, 0
0x0050	0x0009      	RETFIE
; end of _interrupt
_start_ds1302:
;ds1302.c,3 :: 		void start_ds1302() {
;ds1302.c,4 :: 		RST_DS1302 = 0;
0x0051	0x1283      	BCF        STATUS, 5
0x0052	0x1303      	BCF        STATUS, 6
0x0053	0x1007      	BCF        PORTC, 0
;ds1302.c,5 :: 		SCLK = 0;
0x0054	0x1087      	BCF        PORTC, 1
;ds1302.c,6 :: 		RST_DS1302 = 1;
0x0055	0x1407      	BSF        PORTC, 0
;ds1302.c,7 :: 		Delay_us(4);
0x0056	0x0000      	NOP
0x0057	0x0000      	NOP
0x0058	0x0000      	NOP
0x0059	0x0000      	NOP
;ds1302.c,8 :: 		}
L_end_start_ds1302:
0x005A	0x0008      	RETURN
; end of _start_ds1302
_toggle_write_ds1302:
;ds1302.c,31 :: 		void toggle_write_ds1302(unsigned char write_data, unsigned char release) {
;ds1302.c,33 :: 		for(i = 0; i < 8; i++) {
0x005B	0x1283      	BCF        STATUS, 5
0x005C	0x1303      	BCF        STATUS, 6
0x005D	0x01F1      	CLRF       R1
L_toggle_write_ds13023:
0x005E	0x3008      	MOVLW      8
0x005F	0x0271      	SUBWF      R1, 0
0x0060	0x1803      	BTFSC      STATUS, 0
0x0061	0x287B      	GOTO       L_toggle_write_ds13024
;ds1302.c,34 :: 		IO = write_data.F0;
0x0062	0x1283      	BCF        STATUS, 5
0x0063	0x183F      	BTFSC      FARG_toggle_write_ds1302_write_data, 0
0x0064	0x2867      	GOTO       L__toggle_write_ds130217
0x0065	0x1107      	BCF        PORTC, 2
0x0066	0x2868      	GOTO       L__toggle_write_ds130218
L__toggle_write_ds130217:
0x0067	0x1507      	BSF        PORTC, 2
L__toggle_write_ds130218:
;ds1302.c,35 :: 		write_data >>= 1;
0x0068	0x0CBF      	RRF        FARG_toggle_write_ds1302_write_data, 1
0x0069	0x13BF      	BCF        FARG_toggle_write_ds1302_write_data, 7
;ds1302.c,36 :: 		SCLK = 1;
0x006A	0x1487      	BSF        PORTC, 1
;ds1302.c,37 :: 		asm nop;
0x006B	0x0000      	NOP
;ds1302.c,38 :: 		if(release && i == 7) {
0x006C	0x0840      	MOVF       FARG_toggle_write_ds1302_release, 0
0x006D	0x1903      	BTFSC      STATUS, 2
0x006E	0x2876      	GOTO       L_toggle_write_ds13028
0x006F	0x0871      	MOVF       R1, 0
0x0070	0x3A07      	XORLW      7
0x0071	0x1D03      	BTFSS      STATUS, 2
0x0072	0x2876      	GOTO       L_toggle_write_ds13028
L__toggle_write_ds130210:
;ds1302.c,39 :: 		IO_DIR = 1;
0x0073	0x1683      	BSF        STATUS, 5
0x0074	0x1507      	BSF        TRISC, 2
;ds1302.c,40 :: 		} else {
0x0075	0x2879      	GOTO       L_toggle_write_ds13029
L_toggle_write_ds13028:
;ds1302.c,41 :: 		SCLK = 0;
0x0076	0x1283      	BCF        STATUS, 5
0x0077	0x1087      	BCF        PORTC, 1
;ds1302.c,42 :: 		asm nop;
0x0078	0x0000      	NOP
;ds1302.c,43 :: 		}
L_toggle_write_ds13029:
;ds1302.c,33 :: 		for(i = 0; i < 8; i++) {
0x0079	0x0AF1      	INCF       R1, 1
;ds1302.c,44 :: 		}
0x007A	0x285E      	GOTO       L_toggle_write_ds13023
L_toggle_write_ds13024:
;ds1302.c,45 :: 		}
L_end_toggle_write_ds1302:
0x007B	0x0008      	RETURN
; end of _toggle_write_ds1302
_toggle_read_ds1302:
;ds1302.c,16 :: 		unsigned char toggle_read_ds1302() {
;ds1302.c,18 :: 		IO_DIR = 1;
0x007C	0x1683      	BSF        STATUS, 5
0x007D	0x1303      	BCF        STATUS, 6
0x007E	0x1507      	BSF        TRISC, 2
;ds1302.c,19 :: 		read_data = 0;
0x007F	0x01F4      	CLRF       R4
;ds1302.c,20 :: 		for(i = 0; i < 8; i++) {
0x0080	0x01F3      	CLRF       R3
L_toggle_read_ds13020:
0x0081	0x3008      	MOVLW      8
0x0082	0x0273      	SUBWF      R3, 0
0x0083	0x1803      	BTFSC      STATUS, 0
0x0084	0x289C      	GOTO       L_toggle_read_ds13021
;ds1302.c,21 :: 		SCLK = 1;
0x0085	0x1283      	BCF        STATUS, 5
0x0086	0x1487      	BSF        PORTC, 1
;ds1302.c,22 :: 		asm nop;
0x0087	0x0000      	NOP
;ds1302.c,23 :: 		SCLK = 0;
0x0088	0x1087      	BCF        PORTC, 1
;ds1302.c,24 :: 		asm nop;
0x0089	0x0000      	NOP
;ds1302.c,25 :: 		read_data |= IO << i;
0x008A	0x01F2      	CLRF       R2
0x008B	0x1907      	BTFSC      PORTC, 2
0x008C	0x0AF2      	INCF       R2, 1
0x008D	0x0873      	MOVF       R3, 0
0x008E	0x00F1      	MOVWF      R1
0x008F	0x0872      	MOVF       R2, 0
0x0090	0x00F0      	MOVWF      R0
0x0091	0x0871      	MOVF       R1, 0
L__toggle_read_ds130214:
0x0092	0x1903      	BTFSC      STATUS, 2
0x0093	0x2898      	GOTO       L__toggle_read_ds130215
0x0094	0x0DF0      	RLF        R0, 1
0x0095	0x1070      	BCF        R0, 0
0x0096	0x3EFF      	ADDLW      255
0x0097	0x2892      	GOTO       L__toggle_read_ds130214
L__toggle_read_ds130215:
0x0098	0x0870      	MOVF       R0, 0
0x0099	0x04F4      	IORWF      R4, 1
;ds1302.c,20 :: 		for(i = 0; i < 8; i++) {
0x009A	0x0AF3      	INCF       R3, 1
;ds1302.c,26 :: 		}
0x009B	0x2881      	GOTO       L_toggle_read_ds13020
L_toggle_read_ds13021:
;ds1302.c,27 :: 		IO_DIR = 0;
0x009C	0x1683      	BSF        STATUS, 5
0x009D	0x1107      	BCF        TRISC, 2
;ds1302.c,28 :: 		return read_data;
0x009E	0x0874      	MOVF       R4, 0
0x009F	0x00F0      	MOVWF      R0
;ds1302.c,29 :: 		}
L_end_toggle_read_ds1302:
0x00A0	0x0008      	RETURN
; end of _toggle_read_ds1302
_stop_ds1302:
;ds1302.c,10 :: 		void stop_ds1302() {
;ds1302.c,11 :: 		RST_DS1302 = 0;
0x00A1	0x1283      	BCF        STATUS, 5
0x00A2	0x1303      	BCF        STATUS, 6
0x00A3	0x1007      	BCF        PORTC, 0
;ds1302.c,12 :: 		Delay_us(4);
0x00A4	0x0000      	NOP
0x00A5	0x0000      	NOP
0x00A6	0x0000      	NOP
0x00A7	0x0000      	NOP
;ds1302.c,14 :: 		}
L_end_stop_ds1302:
0x00A8	0x0008      	RETURN
; end of _stop_ds1302
_i2c_slave_init:
;i2c_slave.c,3 :: 		void i2c_slave_init(unsigned char slave_address) {
;i2c_slave.c,4 :: 		SCL_DIR = 1;
0x00A9	0x1683      	BSF        STATUS, 5
0x00AA	0x1303      	BCF        STATUS, 6
0x00AB	0x1607      	BSF        TRISC, 4
;i2c_slave.c,5 :: 		SDA_DIR = 1;
0x00AC	0x1587      	BSF        TRISC, 3
;i2c_slave.c,6 :: 		SSPADD = slave_address << 1;
0x00AD	0x1283      	BCF        STATUS, 5
0x00AE	0x083D      	MOVF       FARG_i2c_slave_init_slave_address, 0
0x00AF	0x00F0      	MOVWF      R0
0x00B0	0x0DF0      	RLF        R0, 1
0x00B1	0x1070      	BCF        R0, 0
0x00B2	0x0870      	MOVF       R0, 0
0x00B3	0x1683      	BSF        STATUS, 5
0x00B4	0x0093      	MOVWF      SSPADD
;i2c_slave.c,7 :: 		SSPCON = 0x36;  // normal 7bit address mode ckp = 1(nack)
0x00B5	0x3036      	MOVLW      54
0x00B6	0x1283      	BCF        STATUS, 5
0x00B7	0x0094      	MOVWF      SSPCON
;i2c_slave.c,8 :: 		SSPSTAT = 0x80; // set standard speed mode(100kHz and 1MHz)
0x00B8	0x3080      	MOVLW      128
0x00B9	0x1683      	BSF        STATUS, 5
0x00BA	0x0094      	MOVWF      SSPSTAT
;i2c_slave.c,9 :: 		PIR1.SSPIF = 0;
0x00BB	0x1283      	BCF        STATUS, 5
0x00BC	0x118C      	BCF        PIR1, 3
;i2c_slave.c,10 :: 		PIE1.SSPIE = 1;
0x00BD	0x1683      	BSF        STATUS, 5
0x00BE	0x158C      	BSF        PIE1, 3
;i2c_slave.c,11 :: 		PIR2.BCLIF = 0;
0x00BF	0x1283      	BCF        STATUS, 5
0x00C0	0x118D      	BCF        PIR2, 3
;i2c_slave.c,12 :: 		PIE2.BCLIE = 1;
0x00C1	0x1683      	BSF        STATUS, 5
0x00C2	0x158D      	BSF        PIE2, 3
;i2c_slave.c,13 :: 		INTCON = 0xC0;  // GIE, PEIE ENABLE
0x00C3	0x30C0      	MOVLW      192
0x00C4	0x008B      	MOVWF      INTCON
;i2c_slave.c,14 :: 		}
L_end_i2c_slave_init:
0x00C5	0x0008      	RETURN
; end of _i2c_slave_init
_read_ds1302:
;ds1302.c,47 :: 		unsigned char read_ds1302(unsigned char cmd) {
;ds1302.c,49 :: 		cmd.B0 = 1;
0x00C6	0x1283      	BCF        STATUS, 5
0x00C7	0x1303      	BCF        STATUS, 6
0x00C8	0x143D      	BSF        FARG_read_ds1302_cmd, 0
;ds1302.c,50 :: 		start_ds1302();
0x00C9	0x2051      	CALL       _start_ds1302
;ds1302.c,51 :: 		toggle_write_ds1302(cmd, 1);
0x00CA	0x083D      	MOVF       FARG_read_ds1302_cmd, 0
0x00CB	0x00BF      	MOVWF      FARG_toggle_write_ds1302_write_data
0x00CC	0x3001      	MOVLW      1
0x00CD	0x00C0      	MOVWF      FARG_toggle_write_ds1302_release
0x00CE	0x205B      	CALL       _toggle_write_ds1302
;ds1302.c,52 :: 		read_data = toggle_read_ds1302();
0x00CF	0x207C      	CALL       _toggle_read_ds1302
0x00D0	0x0870      	MOVF       R0, 0
0x00D1	0x1283      	BCF        STATUS, 5
0x00D2	0x00BE      	MOVWF      read_ds1302_read_data_L0
;ds1302.c,53 :: 		stop_ds1302();
0x00D3	0x20A1      	CALL       _stop_ds1302
;ds1302.c,54 :: 		return read_data;
0x00D4	0x083E      	MOVF       read_ds1302_read_data_L0, 0
0x00D5	0x00F0      	MOVWF      R0
;ds1302.c,55 :: 		}
L_end_read_ds1302:
0x00D6	0x0008      	RETURN
; end of _read_ds1302
_write_ds1302:
;ds1302.c,57 :: 		void write_ds1302(unsigned char cmd, unsigned char write_data) {
;ds1302.c,58 :: 		start_ds1302();
0x00D7	0x2051      	CALL       _start_ds1302
;ds1302.c,59 :: 		toggle_write_ds1302(cmd, 0);
0x00D8	0x083D      	MOVF       FARG_write_ds1302_cmd, 0
0x00D9	0x00BF      	MOVWF      FARG_toggle_write_ds1302_write_data
0x00DA	0x01C0      	CLRF       FARG_toggle_write_ds1302_release
0x00DB	0x205B      	CALL       _toggle_write_ds1302
;ds1302.c,60 :: 		toggle_write_ds1302(write_data, 0);
0x00DC	0x1283      	BCF        STATUS, 5
0x00DD	0x1303      	BCF        STATUS, 6
0x00DE	0x083E      	MOVF       FARG_write_ds1302_write_data, 0
0x00DF	0x00BF      	MOVWF      FARG_toggle_write_ds1302_write_data
0x00E0	0x01C0      	CLRF       FARG_toggle_write_ds1302_release
0x00E1	0x205B      	CALL       _toggle_write_ds1302
;ds1302.c,61 :: 		stop_ds1302();
0x00E2	0x20A1      	CALL       _stop_ds1302
;ds1302.c,62 :: 		}
L_end_write_ds1302:
0x00E3	0x0008      	RETURN
; end of _write_ds1302
_____DoICP:
;__Lib_System.c,6 :: 		
;__Lib_System.c,9 :: 		
0x00E4	0x1283      	BCF        STATUS, 5
0x00E5	0x1303      	BCF        STATUS, 6
0x00E6	0x0835      	MOVF       ___DoICPAddr+1, 0
0x00E7	0x008A      	MOVWF      PCLATH
;__Lib_System.c,10 :: 		
0x00E8	0x0834      	MOVF       ___DoICPAddr, 0
0x00E9	0x0082      	MOVWF      PCL
;__Lib_System.c,12 :: 		
L_end_____DoICP:
0x00EA	0x0008      	RETURN
; end of _____DoICP
_get_date:
;ds1302.c,74 :: 		void get_date(unsigned char *year, unsigned char *month, unsigned char *day) {
;ds1302.c,75 :: 		*year   = read_ds1302(READ_YEAR_CMD);
0x00EB	0x308D      	MOVLW      141
0x00EC	0x1283      	BCF        STATUS, 5
0x00ED	0x1303      	BCF        STATUS, 6
0x00EE	0x00BD      	MOVWF      FARG_read_ds1302_cmd
0x00EF	0x20C6      	CALL       _read_ds1302
0x00F0	0x0839      	MOVF       FARG_get_date_year, 0
0x00F1	0x0084      	MOVWF      FSR
0x00F2	0x0870      	MOVF       R0, 0
0x00F3	0x0080      	MOVWF      INDF
;ds1302.c,76 :: 		*month = read_ds1302(READ_MONTH_CMD);
0x00F4	0x3089      	MOVLW      137
0x00F5	0x00BD      	MOVWF      FARG_read_ds1302_cmd
0x00F6	0x20C6      	CALL       _read_ds1302
0x00F7	0x083A      	MOVF       FARG_get_date_month, 0
0x00F8	0x0084      	MOVWF      FSR
0x00F9	0x0870      	MOVF       R0, 0
0x00FA	0x0080      	MOVWF      INDF
;ds1302.c,77 :: 		*day   = read_ds1302(READ_DAY_CMD);
0x00FB	0x3087      	MOVLW      135
0x00FC	0x00BD      	MOVWF      FARG_read_ds1302_cmd
0x00FD	0x20C6      	CALL       _read_ds1302
0x00FE	0x083B      	MOVF       FARG_get_date_day, 0
0x00FF	0x0084      	MOVWF      FSR
0x0100	0x0870      	MOVF       R0, 0
0x0101	0x0080      	MOVWF      INDF
;ds1302.c,78 :: 		}
L_end_get_date:
0x0102	0x0008      	RETURN
; end of _get_date
_get_time:
;ds1302.c,68 :: 		void get_time(unsigned char *hour, unsigned char *minute, unsigned char *second) {
;ds1302.c,69 :: 		*hour   = read_ds1302(READ_HOUR_CMD);
0x0103	0x3085      	MOVLW      133
0x0104	0x1283      	BCF        STATUS, 5
0x0105	0x1303      	BCF        STATUS, 6
0x0106	0x00BD      	MOVWF      FARG_read_ds1302_cmd
0x0107	0x20C6      	CALL       _read_ds1302
0x0108	0x0839      	MOVF       FARG_get_time_hour, 0
0x0109	0x0084      	MOVWF      FSR
0x010A	0x0870      	MOVF       R0, 0
0x010B	0x0080      	MOVWF      INDF
;ds1302.c,70 :: 		*minute = read_ds1302(READ_MINUTE_CMD);
0x010C	0x3083      	MOVLW      131
0x010D	0x00BD      	MOVWF      FARG_read_ds1302_cmd
0x010E	0x20C6      	CALL       _read_ds1302
0x010F	0x083A      	MOVF       FARG_get_time_minute, 0
0x0110	0x0084      	MOVWF      FSR
0x0111	0x0870      	MOVF       R0, 0
0x0112	0x0080      	MOVWF      INDF
;ds1302.c,71 :: 		*second = read_ds1302(READ_SECOND_CMD);
0x0113	0x3081      	MOVLW      129
0x0114	0x00BD      	MOVWF      FARG_read_ds1302_cmd
0x0115	0x20C6      	CALL       _read_ds1302
0x0116	0x083B      	MOVF       FARG_get_time_second, 0
0x0117	0x0084      	MOVWF      FSR
0x0118	0x0870      	MOVF       R0, 0
0x0119	0x0080      	MOVWF      INDF
;ds1302.c,72 :: 		}
L_end_get_time:
0x011A	0x0008      	RETURN
; end of _get_time
_set_date:
;ds1302.c,87 :: 		void set_date(unsigned char year, unsigned char month, unsigned char day, unsigned char week_day) {
;ds1302.c,89 :: 		write_ds1302(WRITE_YEAR_CMD,    year);
0x011B	0x308C      	MOVLW      140
0x011C	0x1283      	BCF        STATUS, 5
0x011D	0x1303      	BCF        STATUS, 6
0x011E	0x00BD      	MOVWF      FARG_write_ds1302_cmd
0x011F	0x0839      	MOVF       FARG_set_date_year, 0
0x0120	0x00BE      	MOVWF      FARG_write_ds1302_write_data
0x0121	0x20D7      	CALL       _write_ds1302
;ds1302.c,90 :: 		write_ds1302(WRITE_MONTH_CMD,   month);
0x0122	0x3088      	MOVLW      136
0x0123	0x00BD      	MOVWF      FARG_write_ds1302_cmd
0x0124	0x083A      	MOVF       FARG_set_date_month, 0
0x0125	0x00BE      	MOVWF      FARG_write_ds1302_write_data
0x0126	0x20D7      	CALL       _write_ds1302
;ds1302.c,91 :: 		write_ds1302(WRITE_DAY_CMD,     day);
0x0127	0x3086      	MOVLW      134
0x0128	0x00BD      	MOVWF      FARG_write_ds1302_cmd
0x0129	0x083B      	MOVF       FARG_set_date_day, 0
0x012A	0x00BE      	MOVWF      FARG_write_ds1302_write_data
0x012B	0x20D7      	CALL       _write_ds1302
;ds1302.c,92 :: 		write_ds1302(WRITE_WEEKDAY_CMD, week_day);
0x012C	0x308A      	MOVLW      138
0x012D	0x00BD      	MOVWF      FARG_write_ds1302_cmd
0x012E	0x083C      	MOVF       FARG_set_date_week_day, 0
0x012F	0x00BE      	MOVWF      FARG_write_ds1302_write_data
0x0130	0x20D7      	CALL       _write_ds1302
;ds1302.c,93 :: 		}
L_end_set_date:
0x0131	0x0008      	RETURN
; end of _set_date
___CC2DW:
;__Lib_System.c,134 :: 		
;__Lib_System.c,137 :: 		
_CC2D_Loop1:
;__Lib_System.c,139 :: 		
0x0132	0x20E4      	CALL       _____DoICP
0x0133	0x118A      	BCF        PCLATH, 3
0x0134	0x120A      	BCF        PCLATH, 4
;__Lib_System.c,141 :: 		
0x0135	0x0080      	MOVWF      INDF
;__Lib_System.c,142 :: 		
0x0136	0x0A84      	INCF       FSR, 1
;__Lib_System.c,143 :: 		
0x0137	0x0AB4      	INCF       ___DoICPAddr, 1
;__Lib_System.c,145 :: 		
0x0138	0x1903      	BTFSC      STATUS, 2
;__Lib_System.c,146 :: 		
0x0139	0x0AB5      	INCF       ___DoICPAddr+1, 1
;__Lib_System.c,147 :: 		
0x013A	0x03F0      	DECF       R0, 1
;__Lib_System.c,149 :: 		
0x013B	0x1D03      	BTFSS      STATUS, 2
;__Lib_System.c,150 :: 		
0x013C	0x2932      	GOTO       _CC2D_Loop1
;__Lib_System.c,152 :: 		
L_end___CC2DW:
0x013D	0x0008      	RETURN
; end of ___CC2DW
_init:
;slave.c,62 :: 		void init() {
;slave.c,63 :: 		ANSEL = 0;
0x013E	0x1683      	BSF        STATUS, 5
0x013F	0x1703      	BSF        STATUS, 6
0x0140	0x0188      	CLRF       ANSEL
;slave.c,64 :: 		ANSELh = 0;
0x0141	0x0189      	CLRF       ANSELH
;slave.c,67 :: 		OPTION_REG = 0;
0x0142	0x0181      	CLRF       OPTION_REG
;slave.c,69 :: 		PORTA = 0;
0x0143	0x1283      	BCF        STATUS, 5
0x0144	0x1303      	BCF        STATUS, 6
0x0145	0x0185      	CLRF       PORTA
;slave.c,70 :: 		TRISA = 0;
0x0146	0x1683      	BSF        STATUS, 5
0x0147	0x0185      	CLRF       TRISA
;slave.c,71 :: 		PORTB = 0;
0x0148	0x1283      	BCF        STATUS, 5
0x0149	0x0186      	CLRF       PORTB
;slave.c,72 :: 		TRISB = 0;
0x014A	0x1683      	BSF        STATUS, 5
0x014B	0x0186      	CLRF       TRISB
;slave.c,73 :: 		PORTC = 0;
0x014C	0x1283      	BCF        STATUS, 5
0x014D	0x0187      	CLRF       PORTC
;slave.c,74 :: 		TRISC = 0;
0x014E	0x1683      	BSF        STATUS, 5
0x014F	0x0187      	CLRF       TRISC
;slave.c,75 :: 		PORTD = 0;
0x0150	0x1283      	BCF        STATUS, 5
0x0151	0x0188      	CLRF       PORTD
;slave.c,76 :: 		TRISD = 0;
0x0152	0x1683      	BSF        STATUS, 5
0x0153	0x0188      	CLRF       TRISD
;slave.c,78 :: 		i2c_slave_init(i2c_address);
0x0154	0x1283      	BCF        STATUS, 5
0x0155	0x0822      	MOVF       _i2c_address, 0
0x0156	0x00BD      	MOVWF      FARG_i2c_slave_init_slave_address
0x0157	0x20A9      	CALL       _i2c_slave_init
;slave.c,79 :: 		}
L_end_init:
0x0158	0x0008      	RETURN
; end of _init
_set_time:
;ds1302.c,80 :: 		void set_time(unsigned char hour, unsigned char minute, unsigned char second) {
;ds1302.c,82 :: 		write_ds1302(WRITE_HOUR_CMD,   hour);
0x0159	0x3084      	MOVLW      132
0x015A	0x1283      	BCF        STATUS, 5
0x015B	0x1303      	BCF        STATUS, 6
0x015C	0x00BD      	MOVWF      FARG_write_ds1302_cmd
0x015D	0x0839      	MOVF       FARG_set_time_hour, 0
0x015E	0x00BE      	MOVWF      FARG_write_ds1302_write_data
0x015F	0x20D7      	CALL       _write_ds1302
;ds1302.c,83 :: 		write_ds1302(WRITE_MINUTE_CMD, minute);
0x0160	0x3082      	MOVLW      130
0x0161	0x00BD      	MOVWF      FARG_write_ds1302_cmd
0x0162	0x083A      	MOVF       FARG_set_time_minute, 0
0x0163	0x00BE      	MOVWF      FARG_write_ds1302_write_data
0x0164	0x20D7      	CALL       _write_ds1302
;ds1302.c,84 :: 		write_ds1302(WRITE_SECOND_CMD, second);
0x0165	0x3080      	MOVLW      128
0x0166	0x00BD      	MOVWF      FARG_write_ds1302_cmd
0x0167	0x083B      	MOVF       FARG_set_time_second, 0
0x0168	0x00BE      	MOVWF      FARG_write_ds1302_write_data
0x0169	0x20D7      	CALL       _write_ds1302
;ds1302.c,85 :: 		}
L_end_set_time:
0x016A	0x0008      	RETURN
; end of _set_time
_main:
0x016B	0x3006      	MOVLW      6
0x016C	0x1283      	BCF        STATUS, 5
0x016D	0x1303      	BCF        STATUS, 6
0x016E	0x00A2      	MOVWF      _i2c_address
0x016F	0x01A3      	CLRF       _set_date_array
0x0170	0x01A4      	CLRF       36
0x0171	0x01A5      	CLRF       37
0x0172	0x01A6      	CLRF       38
0x0173	0x01A7      	CLRF       39
0x0174	0x01A8      	CLRF       40
0x0175	0x01A9      	CLRF       41
0x0176	0x01AA      	CLRF       _reg_adr_flag
0x0177	0x01AB      	CLRF       _array_index
0x0178	0x01AC      	CLRF       _set_date_time_flag
0x0179	0x01AD      	CLRF       _get_date_array
0x017A	0x01AE      	CLRF       46
0x017B	0x01AF      	CLRF       47
0x017C	0x01B0      	CLRF       48
0x017D	0x01B1      	CLRF       49
0x017E	0x01B2      	CLRF       50
0x017F	0x01B3      	CLRF       51
;slave.c,81 :: 		void main() {
;slave.c,82 :: 		init();
0x0180	0x213E      	CALL       _init
;slave.c,84 :: 		while(1) {
L_main9:
;slave.c,86 :: 		get_time(get_date_array, get_date_array + 1, get_date_array + 2);
0x0181	0x302D      	MOVLW      _get_date_array
0x0182	0x1283      	BCF        STATUS, 5
0x0183	0x00B9      	MOVWF      FARG_get_time_hour
0x0184	0x302E      	MOVLW      _get_date_array+1
0x0185	0x00BA      	MOVWF      FARG_get_time_minute
0x0186	0x302F      	MOVLW      _get_date_array+2
0x0187	0x00BB      	MOVWF      FARG_get_time_second
0x0188	0x2103      	CALL       _get_time
;slave.c,88 :: 		get_date(get_date_array + 3, get_date_array + 4, get_date_array + 5);
0x0189	0x3030      	MOVLW      _get_date_array+3
0x018A	0x00B9      	MOVWF      FARG_get_date_year
0x018B	0x3031      	MOVLW      _get_date_array+4
0x018C	0x00BA      	MOVWF      FARG_get_date_month
0x018D	0x3032      	MOVLW      _get_date_array+5
0x018E	0x00BB      	MOVWF      FARG_get_date_day
0x018F	0x20EB      	CALL       _get_date
;slave.c,90 :: 		if(set_date_time_flag == 1) {
0x0190	0x082C      	MOVF       _set_date_time_flag, 0
0x0191	0x3A01      	XORLW      1
0x0192	0x1D03      	BTFSS      STATUS, 2
0x0193	0x29A5      	GOTO       L_main11
;slave.c,91 :: 		set_date_time_flag = 0;
0x0194	0x01AC      	CLRF       _set_date_time_flag
;slave.c,92 :: 		set_time(set_date_array[0], set_date_array[1], set_date_array[2]);
0x0195	0x0823      	MOVF       _set_date_array, 0
0x0196	0x00B9      	MOVWF      FARG_set_time_hour
0x0197	0x0824      	MOVF       _set_date_array+1, 0
0x0198	0x00BA      	MOVWF      FARG_set_time_minute
0x0199	0x0825      	MOVF       _set_date_array+2, 0
0x019A	0x00BB      	MOVWF      FARG_set_time_second
0x019B	0x2159      	CALL       _set_time
;slave.c,93 :: 		set_date(set_date_array[3], set_date_array[4], set_date_array[5], set_date_array[6]);
0x019C	0x0826      	MOVF       _set_date_array+3, 0
0x019D	0x00B9      	MOVWF      FARG_set_date_year
0x019E	0x0827      	MOVF       _set_date_array+4, 0
0x019F	0x00BA      	MOVWF      FARG_set_date_month
0x01A0	0x0828      	MOVF       _set_date_array+5, 0
0x01A1	0x00BB      	MOVWF      FARG_set_date_day
0x01A2	0x0829      	MOVF       _set_date_array+6, 0
0x01A3	0x00BC      	MOVWF      FARG_set_date_week_day
0x01A4	0x211B      	CALL       _set_date
;slave.c,94 :: 		}
L_main11:
;slave.c,95 :: 		}
0x01A5	0x2981      	GOTO       L_main9
;slave.c,96 :: 		}
L_end_main:
0x01A6	0x29A6      	GOTO       $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0004      [77]    _interrupt
0x0051      [10]    _start_ds1302
0x005B      [33]    _toggle_write_ds1302
0x007C      [37]    _toggle_read_ds1302
0x00A1       [8]    _stop_ds1302
0x00A9      [29]    _i2c_slave_init
0x00C6      [17]    _read_ds1302
0x00D7      [13]    _write_ds1302
0x00E4       [7]    _____DoICP
0x00EB      [24]    _get_date
0x0103      [24]    _get_time
0x011B      [23]    _set_date
0x0132      [12]    ___CC2DW
0x013E      [27]    _init
0x0159      [18]    _set_time
0x016B      [60]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    INDF
0x0002       [1]    PCL
0x0003       [1]    STATUS
0x0004       [1]    FSR
0x0005       [1]    PORTA
0x0006       [1]    PORTB
0x0007       [1]    PORTC
0x0008       [1]    PORTD
0x000A       [1]    PCLATH
0x000B       [1]    INTCON
0x000C       [1]    PIR1
0x000D       [1]    PIR2
0x0013       [1]    SSPBUF
0x0014       [1]    SSPCON
0x0022       [1]    _i2c_address
0x0023       [7]    _set_date_array
0x002A       [1]    _reg_adr_flag
0x002B       [1]    _array_index
0x002C       [1]    _set_date_time_flag
0x002D       [7]    _get_date_array
0x0034       [2]    ___DoICPAddr
0x0036       [1]    _temp
0x0037       [1]    ___saveSTATUS
0x0038       [1]    ___savePCLATH
0x0039       [1]    FARG_set_date_year
0x0039       [1]    FARG_get_time_hour
0x0039       [1]    FARG_get_date_year
0x0039       [1]    FARG_set_time_hour
0x003A       [1]    FARG_set_time_minute
0x003A       [1]    FARG_get_time_minute
0x003A       [1]    FARG_get_date_month
0x003A       [1]    FARG_set_date_month
0x003B       [1]    FARG_get_time_second
0x003B       [1]    FARG_set_date_day
0x003B       [1]    FARG_set_time_second
0x003B       [1]    FARG_get_date_day
0x003C       [1]    FARG_set_date_week_day
0x003D       [1]    FARG_read_ds1302_cmd
0x003D       [1]    FARG_write_ds1302_cmd
0x003D       [1]    FARG_i2c_slave_init_slave_address
0x003E       [1]    FARG_write_ds1302_write_data
0x003E       [1]    read_ds1302_read_data_L0
0x003F       [1]    FARG_toggle_write_ds1302_write_data
0x0040       [1]    FARG_toggle_write_ds1302_release
0x0070       [1]    R0
0x0071       [1]    R1
0x0072       [1]    R2
0x0073       [1]    R3
0x0074       [1]    R4
0x0075       [1]    R5
0x0076       [1]    R6
0x0077       [1]    R7
0x0078       [1]    R8
0x0079       [1]    R9
0x007A       [1]    R10
0x007B       [1]    R11
0x007C       [1]    R12
0x007D       [1]    R13
0x007E       [1]    R14
0x007F       [1]    R15
0x0081       [1]    OPTION_REG
0x0085       [1]    TRISA
0x0086       [1]    TRISB
0x0087       [1]    TRISC
0x0088       [1]    TRISD
0x008C       [1]    PIE1
0x008D       [1]    PIE2
0x0093       [1]    SSPADD
0x0094       [1]    SSPSTAT
0x0188       [1]    ANSEL
0x0189       [1]    ANSELH
